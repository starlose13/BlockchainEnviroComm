# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, SunAir Institute
# This file is distributed under the same license as the Decentralized
# Communication Framework package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Decentralized Communication Framework 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-16 13:41+0330\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: fa\n"
"Language-Team: fa <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.16.0\n"

#: ../introduction.rst:2
msgid "Introduction"
msgstr ""

#: ../introduction.rst:5
msgid "Proposed Network Components"
msgstr ""

#: ../introduction.rst:7
msgid "The proposed network can be divided into three main components:"
msgstr ""

#: ../introduction.rst:9
msgid "**Distributed Ledger (Blockchain)**"
msgstr ""

#: ../introduction.rst:10
msgid "**Smart Contracts: Consensus Mechanism and Node Management**"
msgstr ""

#: ../introduction.rst:11
msgid "**Security (Asymmetric Cryptography)**"
msgstr ""

#: ../introduction.rst:14
msgid "Public Key Management and Security"
msgstr ""

#: ../introduction.rst:16
msgid ""
"Each agent or device that wishes to participate in writing/reading on the"
" blockchain-based platform must have its public key listed in the "
"authorized agent list within the smart contract. Additionally, messages "
"and interactions must be secured against potential attackers. Asymmetric "
"cryptography is used to protect agent data within the network. Messages "
"and interactions (local models) from each agent are first secured using a"
" private key and can only be read with the public key of the same agent. "
"Each agent also has a public key that serves as a type of cryptographic "
"address, allowing other members of the swarm to interact with it."
msgstr ""

#: ../introduction.rst:-1
msgid "Description of the image"
msgstr ""

#: ../introduction.rst:23
msgid ""
"In the cryptographic method mentioned, private keys are used to digitally"
" sign each transaction performed by the agent. However, in blockchain "
"technology, although messages encrypted with a user's private key are "
"accessible to other users through their public key, achieving consensus "
"among users without the need for the same private key is a distinguishing"
" factor. The larger the number of swarm members, the more decentralized "
"the network becomes, which enhances security."
msgstr ""

#: ../introduction.rst:26
msgid "Transaction Process"
msgstr ""

#: ../introduction.rst:28
msgid ""
"When two or more nodes or agents in the network want to transfer or share"
" information, such as battlefield data, trained AI models, etc., which "
"are primary information reports from the agent's perspective, they must "
"go through a process known as a transaction. When a transaction occurs, a"
" node creates a file containing information and target location. These "
"transactions are collected into blocks of transactions, with the block "
"size depending on the application. The blocks are then confirmed and "
"added to the blockchain according to the used consensus mechanism."
msgstr ""

#: ../introduction.rst:30
msgid ""
"Each agent collects environmental data based on sensor specifications and"
" situational awareness of the battlefield, considering sensor "
"limitations. The collected data is processed by environmental agents, and"
" each agent independently broadcasts its decision in the network."
msgstr ""

#: ../introduction.rst:40
msgid "Consensus Process"
msgstr ""

#: ../introduction.rst:42
msgid ""
"After an agent announces a target, other agents present in the network "
"must also announce their targets within an epoch (approximately 10 "
"minutes)."
msgstr ""

#: ../introduction.rst:49
msgid ""
"They can also declare that there is no target. After the epoch concludes,"
" the votes from participating agents are counted. If a quorum is reached,"
" consensus is achieved. Consensus is calculated using the following "
"formula:"
msgstr ""

#: ../introduction.rst:51
msgid ""
"C_j = \\sum_{i=1}^{N} \\text{if } Z_i = j \\text{ then } 1 \\text{ else }"
" 0"
msgstr ""

#: ../introduction.rst:55
msgid "Find the maximum count and its index:"
msgstr ""

#: ../introduction.rst:57
msgid "\\text{maxCount} = \\max(C_1, C_2, C_3, C_4, C_5, C_6, C_7)"
msgstr ""

#: ../introduction.rst:63
msgid "**Important:** We have assumed that number of agents is 7."
msgstr ""

#: ../introduction.rst:65
msgid ""
"If consensus is achieved, the final target is announced to all parties. "
"Otherwise, it is announced that either the votes did not reach a quorum "
"or no consensus was reached in that specific epoch."
msgstr ""

